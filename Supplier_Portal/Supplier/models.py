from django.db import models

class Supplier(models.Model):
    supplier_id = models.BigIntegerField(primary_key=True)
    supplier_party_id = models.BigIntegerField()
    supplier_name = models.CharField(max_length=255)
    supplier_number = models.CharField(max_length=50)
    alternate_name = models.CharField(max_length=255, null=True, blank=True)
    tax_organization_type_code = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    tax_organization_type = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    supplier_type_code = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    supplier_type = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    inactive_date = models.DateTimeField(null=True, blank=True)
    status = models.CharField(max_length=20)
    business_relationship_code = models.CharField(max_length=50)
    business_relationship = models.CharField(max_length=100)
    parent_supplier_id = models.BigIntegerField(null=True, blank=True)
    parent_supplier = models.CharField(max_length=255, null=True, blank=True)
    parent_supplier_number = models.CharField(max_length=50, null=True, blank=True)
    creation_date = models.DateTimeField()
    created_by = models.EmailField()
    last_update_date = models.DateTimeField()
    last_updated_by = models.EmailField()
    creation_source_code = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    creation_source = models.CharField(max_length=50, null=True, blank=True)  # Allow null
    datafox_score = models.FloatField(null=True, blank=True)
    datafox_scoring_criteria = models.TextField(null=True, blank=True)
    alias = models.CharField(max_length=255, null=True, blank=True)
    duns_number = models.CharField(max_length=50, null=True, blank=True)
    one_time_supplier_flag = models.BooleanField(null=True, blank=True)
    registry_id = models.CharField(max_length=50)
    customer_number = models.CharField(max_length=50, null=True, blank=True)
    standard_industry_class = models.CharField(max_length=50, null=True, blank=True)
    industry_category = models.CharField(max_length=50, null=True, blank=True)
    industry_subcategory = models.CharField(max_length=50, null=True, blank=True)
    national_insurance_number = models.CharField(max_length=50, null=True, blank=True)
    national_insurance_number_exists_flag = models.BooleanField(default=False)
    corporate_website = models.URLField(null=True, blank=True)
    year_established = models.IntegerField(null=True, blank=True)
    mission_statement = models.TextField(null=True, blank=True)
    year_incorporated = models.IntegerField(null=True, blank=True)
    chief_executive_title = models.CharField(max_length=50, null=True, blank=True)
    chief_executive_name = models.CharField(max_length=255, null=True, blank=True)
    principal_title = models.CharField(max_length=50, null=True, blank=True)
    principal_name = models.CharField(max_length=255, null=True, blank=True)
    fiscal_year_end_month_code = models.CharField(max_length=2, null=True, blank=True)
    fiscal_year_end_month = models.CharField(max_length=20, null=True, blank=True)
    current_fiscal_year_potential_revenue = models.FloatField(null=True, blank=True)
    preferred_functional_currency_code = models.CharField(max_length=10, null=True, blank=True)
    preferred_functional_currency = models.CharField(max_length=50, null=True, blank=True)
    tax_registration_country_code = models.CharField(max_length=10, null=True, blank=True)
    tax_registration_country = models.CharField(max_length=50, null=True, blank=True)
    tax_registration_number = models.CharField(max_length=50)
    taxpayer_country_code = models.CharField(max_length=10, null=True, blank=True)
    taxpayer_country = models.CharField(max_length=50, null=True, blank=True)
    taxpayer_id = models.CharField(max_length=50)
    taxpayer_id_exists_flag = models.BooleanField(default=True)
    federal_reportable_flag = models.BooleanField(default=False)
    federal_income_tax_type_code = models.CharField(max_length=50, null=True, blank=True)
    federal_income_tax_type = models.CharField(max_length=50, null=True, blank=True)
    state_reportable_flag = models.BooleanField(null=True, blank=True)
    tax_reporting_name = models.CharField(max_length=100, null=True, blank=True)
    name_control = models.CharField(max_length=50, null=True, blank=True)
    verification_date = models.DateTimeField(null=True, blank=True)
    use_withholding_tax_flag = models.BooleanField(null=True, blank=True)
    withholding_tax_group_id = models.BigIntegerField(null=True, blank=True)
    withholding_tax_group = models.CharField(max_length=100, null=True, blank=True)
    business_classification_not_applicable_flag = models.BooleanField(null=True, blank=True)
    datafox_id = models.CharField(max_length=50, null=True, blank=True)
    datafox_company_name = models.CharField(max_length=255, null=True, blank=True)
    datafox_legal_name = models.CharField(max_length=255, null=True, blank=True)
    datafox_company_primary_url = models.URLField(null=True, blank=True)
    datafox_naics_code = models.CharField(max_length=10, null=True, blank=True)
    datafox_country = models.CharField(max_length=50, null=True, blank=True)
    datafox_ein = models.CharField(max_length=50, null=True, blank=True)
    datafox_last_sync_date = models.DateTimeField(null=True, blank=True)
    ob_enabled_flag = models.BooleanField(null=True, blank=True)
    on_ofac_list_flag = models.BooleanField(null=True, blank=True)
    ofac_sources = models.TextField(null=True, blank=True)
 
    class Meta:
        verbose_name = 'Supplier'
        verbose_name_plural = 'Suppliers'
 
    def __str__(self):
        return self.supplier_name